/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const WINVER: u32 = 1281;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const LUA_MULTILIB: &'static [u8; 4usize] = b"lib\0";
pub const LUA_LMULTILIB: &'static [u8; 4usize] = b"lib\0";
pub const LUA_LROOT: &'static [u8; 11usize] = b"/usr/local\0";
pub const LUA_LUADIR: &'static [u8; 10usize] = b"/lua/5.1/\0";
pub const LUA_LJDIR: &'static [u8; 21usize] = b"/luajit-2.1.0-beta3/\0";
pub const LUA_JROOT: &'static [u8; 11usize] = b"/usr/local\0";
pub const LUA_JPATH: &'static [u8; 43usize] = b";/usr/local/share/luajit-2.1.0-beta3/?.lua\0";
pub const LUA_LLDIR: &'static [u8; 26usize] = b"/usr/local/share/lua/5.1/\0";
pub const LUA_LCDIR: &'static [u8; 24usize] = b"/usr/local/lib/lua/5.1/\0";
pub const LUA_LLPATH: &'static [u8; 68usize] =
    b";/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua\0";
pub const LUA_LCPATH1: &'static [u8; 29usize] = b";/usr/local/lib/lua/5.1/?.so\0";
pub const LUA_LCPATH2: &'static [u8; 35usize] = b";/usr/local/lib/lua/5.1/loadall.so\0";
pub const LUA_PATH: &'static [u8; 9usize] = b"LUA_PATH\0";
pub const LUA_CPATH: &'static [u8; 10usize] = b"LUA_CPATH\0";
pub const LUA_INIT: &'static [u8; 9usize] = b"LUA_INIT\0";
pub const LUA_DIRSEP: &'static [u8; 2usize] = b"/\0";
pub const LUA_PATHSEP: &'static [u8; 2usize] = b";\0";
pub const LUA_PATH_MARK: &'static [u8; 2usize] = b"?\0";
pub const LUA_EXECDIR: &'static [u8; 2usize] = b"!\0";
pub const LUA_IGMARK: &'static [u8; 2usize] = b"-\0";
pub const LUA_PATH_CONFIG: &'static [u8; 11usize] = b"/\n;\n?\n!\n-\n\0";
pub const LUAI_MAXSTACK: u32 = 65500;
pub const LUAI_MAXCSTACK: u32 = 8000;
pub const LUAI_GCPAUSE: u32 = 200;
pub const LUAI_GCMUL: u32 = 200;
pub const LUA_MAXCAPTURES: u32 = 32;
pub const LUA_IDSIZE: u32 = 60;
pub const LUA_NUMBER_SCAN: &'static [u8; 4usize] = b"%lf\0";
pub const LUA_NUMBER_FMT: &'static [u8; 6usize] = b"%.14g\0";
pub const LUAI_MAXNUMBER2STR: u32 = 32;
pub const LUA_INTFRMLEN: &'static [u8; 2usize] = b"l\0";
pub const LUA_VERSION: &'static [u8; 8usize] = b"Lua 5.1\0";
pub const LUA_RELEASE: &'static [u8; 10usize] = b"Lua 5.1.4\0";
pub const LUA_VERSION_NUM: u32 = 501;
pub const LUA_COPYRIGHT: &'static [u8; 41usize] = b"Copyright (C) 1994-2008 Lua.org, PUC-Rio\0";
pub const LUA_AUTHORS: &'static [u8; 49usize] =
    b"R. Ierusalimschy, L. H. de Figueiredo & W. Celes\0";
pub const LUA_SIGNATURE: &'static [u8; 5usize] = b"\x1BLua\0";
pub const LUA_MULTRET: i32 = -1;
pub const LUA_REGISTRYINDEX: i32 = -10000;
pub const LUA_ENVIRONINDEX: i32 = -10001;
pub const LUA_GLOBALSINDEX: i32 = -10002;
pub const LUA_OK: u32 = 0;
pub const LUA_YIELD: u32 = 1;
pub const LUA_ERRRUN: u32 = 2;
pub const LUA_ERRSYNTAX: u32 = 3;
pub const LUA_ERRMEM: u32 = 4;
pub const LUA_ERRERR: u32 = 5;
pub const LUA_TNONE: i32 = -1;
pub const LUA_TNIL: u32 = 0;
pub const LUA_TBOOLEAN: u32 = 1;
pub const LUA_TLIGHTUSERDATA: u32 = 2;
pub const LUA_TNUMBER: u32 = 3;
pub const LUA_TSTRING: u32 = 4;
pub const LUA_TTABLE: u32 = 5;
pub const LUA_TFUNCTION: u32 = 6;
pub const LUA_TUSERDATA: u32 = 7;
pub const LUA_TTHREAD: u32 = 8;
pub const LUA_MINSTACK: u32 = 20;
pub const LUA_GCSTOP: u32 = 0;
pub const LUA_GCRESTART: u32 = 1;
pub const LUA_GCCOLLECT: u32 = 2;
pub const LUA_GCCOUNT: u32 = 3;
pub const LUA_GCCOUNTB: u32 = 4;
pub const LUA_GCSTEP: u32 = 5;
pub const LUA_GCSETPAUSE: u32 = 6;
pub const LUA_GCSETSTEPMUL: u32 = 7;
pub const LUA_GCISRUNNING: u32 = 9;
pub const LUA_HOOKCALL: u32 = 0;
pub const LUA_HOOKRET: u32 = 1;
pub const LUA_HOOKLINE: u32 = 2;
pub const LUA_HOOKCOUNT: u32 = 3;
pub const LUA_HOOKTAILRET: u32 = 4;
pub const LUA_MASKCALL: u32 = 1;
pub const LUA_MASKRET: u32 = 2;
pub const LUA_MASKLINE: u32 = 4;
pub const LUA_MASKCOUNT: u32 = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type emacs_env = emacs_env_26;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_value_tag {
    _unused: [u8; 0],
}
pub type emacs_value = *mut emacs_value_tag;
pub const emacs_variadic_function: _bindgen_ty_1 = -2;
pub type _bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime {
    pub size: isize,
    pub private_members: *mut emacs_runtime_private,
    pub get_environment:
        ::std::option::Option<unsafe extern "C" fn(ert: *mut emacs_runtime) -> *mut emacs_env>,
}
#[test]
fn bindgen_test_layout_emacs_runtime() {
    assert_eq!(
        ::std::mem::size_of::<emacs_runtime>(),
        24usize,
        concat!("Size of: ", stringify!(emacs_runtime))
    );
    assert_eq!(
        ::std::mem::align_of::<emacs_runtime>(),
        8usize,
        concat!("Alignment of ", stringify!(emacs_runtime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_runtime>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_runtime),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_runtime>())).private_members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_runtime),
            "::",
            stringify!(private_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_runtime>())).get_environment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_runtime),
            "::",
            stringify!(get_environment)
        )
    );
}
pub const emacs_funcall_exit_emacs_funcall_exit_return: emacs_funcall_exit = 0;
pub const emacs_funcall_exit_emacs_funcall_exit_signal: emacs_funcall_exit = 1;
pub const emacs_funcall_exit_emacs_funcall_exit_throw: emacs_funcall_exit = 2;
pub type emacs_funcall_exit = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_25 {
    pub size: isize,
    pub private_members: *mut emacs_env_private,
    pub make_global_ref: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,
    >,
    pub free_global_ref: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, global_reference: emacs_value),
    >,
    pub non_local_exit_check:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
    pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
    pub non_local_exit_get: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            non_local_exit_symbol_out: *mut emacs_value,
            non_local_exit_data_out: *mut emacs_value,
        ) -> emacs_funcall_exit,
    >,
    pub non_local_exit_signal: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            non_local_exit_symbol: emacs_value,
            non_local_exit_data: emacs_value,
        ),
    >,
    pub non_local_exit_throw: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
    >,
    pub make_function: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            min_arity: isize,
            max_arity: isize,
            function: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut emacs_env,
                    nargs: isize,
                    args: *mut emacs_value,
                    arg1: *mut ::std::os::raw::c_void,
                ) -> emacs_value,
            >,
            documentation: *const ::std::os::raw::c_char,
            data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
    >,
    pub funcall: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            function: emacs_value,
            nargs: isize,
            args: *mut emacs_value,
        ) -> emacs_value,
    >,
    pub intern: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, symbol_name: *const ::std::os::raw::c_char)
            -> emacs_value,
    >,
    pub type_of: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
    >,
    pub is_not_nil: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> bool,
    >,
    pub eq: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
    >,
    pub extract_integer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,
    >,
    pub make_integer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,
    >,
    pub extract_float:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> f64>,
    pub make_float:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: f64) -> emacs_value>,
    pub copy_string_contents: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            value: emacs_value,
            buffer: *mut ::std::os::raw::c_char,
            size_inout: *mut isize,
        ) -> bool,
    >,
    pub make_string: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            contents: *const ::std::os::raw::c_char,
            length: isize,
        ) -> emacs_value,
    >,
    pub make_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            fin: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
            ptr: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
    >,
    pub get_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::std::os::raw::c_void,
    >,
    pub set_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            uptr: emacs_value,
            ptr: *mut ::std::os::raw::c_void,
        ),
    >,
    pub get_user_finalizer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            env: *mut emacs_env,
            uptr: emacs_value,
        ) -> ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                env: *mut emacs_env,
                uptr: emacs_value,
            ),
        >,
    >,
    pub set_user_finalizer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            uptr: emacs_value,
            fin: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ),
    >,
    pub vec_get: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,
    >,
    pub vec_set: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),
    >,
    pub vec_size:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,
}
#[test]
fn bindgen_test_layout_emacs_env_25() {
    assert_eq!(
        ::std::mem::size_of::<emacs_env_25>(),
        232usize,
        concat!("Size of: ", stringify!(emacs_env_25))
    );
    assert_eq!(
        ::std::mem::align_of::<emacs_env_25>(),
        8usize,
        concat!("Alignment of ", stringify!(emacs_env_25))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).private_members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(private_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_global_ref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_global_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).free_global_ref as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(free_global_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_check as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_check)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_clear as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_get as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_signal as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_signal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_throw as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_throw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_function as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).funcall as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(funcall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).intern as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(intern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).type_of as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(type_of)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).is_not_nil as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(is_not_nil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).eq as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(eq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_integer as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(extract_integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_integer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_float as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(extract_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_float as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).copy_string_contents as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(copy_string_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_string as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_user_ptr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_ptr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(get_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_ptr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(set_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_finalizer as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(get_user_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_finalizer as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(set_user_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_get as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(vec_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_set as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(vec_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_size as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(vec_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_26 {
    pub size: isize,
    pub private_members: *mut emacs_env_private,
    pub make_global_ref: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,
    >,
    pub free_global_ref: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, global_reference: emacs_value),
    >,
    pub non_local_exit_check:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
    pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
    pub non_local_exit_get: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            non_local_exit_symbol_out: *mut emacs_value,
            non_local_exit_data_out: *mut emacs_value,
        ) -> emacs_funcall_exit,
    >,
    pub non_local_exit_signal: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            non_local_exit_symbol: emacs_value,
            non_local_exit_data: emacs_value,
        ),
    >,
    pub non_local_exit_throw: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
    >,
    pub make_function: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            min_arity: isize,
            max_arity: isize,
            function: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut emacs_env,
                    nargs: isize,
                    args: *mut emacs_value,
                    arg1: *mut ::std::os::raw::c_void,
                ) -> emacs_value,
            >,
            documentation: *const ::std::os::raw::c_char,
            data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
    >,
    pub funcall: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            function: emacs_value,
            nargs: isize,
            args: *mut emacs_value,
        ) -> emacs_value,
    >,
    pub intern: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, symbol_name: *const ::std::os::raw::c_char)
            -> emacs_value,
    >,
    pub type_of: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
    >,
    pub is_not_nil: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> bool,
    >,
    pub eq: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
    >,
    pub extract_integer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,
    >,
    pub make_integer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,
    >,
    pub extract_float:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> f64>,
    pub make_float:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: f64) -> emacs_value>,
    pub copy_string_contents: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            value: emacs_value,
            buffer: *mut ::std::os::raw::c_char,
            size_inout: *mut isize,
        ) -> bool,
    >,
    pub make_string: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            contents: *const ::std::os::raw::c_char,
            length: isize,
        ) -> emacs_value,
    >,
    pub make_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            fin: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
            ptr: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
    >,
    pub get_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::std::os::raw::c_void,
    >,
    pub set_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            uptr: emacs_value,
            ptr: *mut ::std::os::raw::c_void,
        ),
    >,
    pub get_user_finalizer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            env: *mut emacs_env,
            uptr: emacs_value,
        ) -> ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                env: *mut emacs_env,
                uptr: emacs_value,
            ),
        >,
    >,
    pub set_user_finalizer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            uptr: emacs_value,
            fin: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ),
    >,
    pub vec_get: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,
    >,
    pub vec_set: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),
    >,
    pub vec_size:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,
    pub should_quit: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> bool>,
}
#[test]
fn bindgen_test_layout_emacs_env_26() {
    assert_eq!(
        ::std::mem::size_of::<emacs_env_26>(),
        240usize,
        concat!("Size of: ", stringify!(emacs_env_26))
    );
    assert_eq!(
        ::std::mem::align_of::<emacs_env_26>(),
        8usize,
        concat!("Alignment of ", stringify!(emacs_env_26))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).private_members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(private_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_global_ref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(make_global_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).free_global_ref as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(free_global_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_check as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(non_local_exit_check)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_clear as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(non_local_exit_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_get as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(non_local_exit_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_signal as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(non_local_exit_signal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_26>())).non_local_exit_throw as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(non_local_exit_throw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_function as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(make_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).funcall as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(funcall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).intern as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(intern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).type_of as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(type_of)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).is_not_nil as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(is_not_nil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).eq as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(eq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).extract_integer as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(extract_integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_integer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(make_integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).extract_float as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(extract_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_float as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(make_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_26>())).copy_string_contents as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(copy_string_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_string as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(make_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).make_user_ptr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(make_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).get_user_ptr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(get_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).set_user_ptr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(set_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).get_user_finalizer as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(get_user_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).set_user_finalizer as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(set_user_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_get as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(vec_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_set as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(vec_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).vec_size as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(vec_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_26>())).should_quit as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_26),
            "::",
            stringify!(should_quit)
        )
    );
}
extern "C" {
    pub fn emacs_module_init(ert: *mut emacs_runtime) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_State {
    _unused: [u8; 0],
}
pub type lua_CFunction =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> ::std::os::raw::c_int>;
pub type lua_Reader = ::std::option::Option<
    unsafe extern "C" fn(L: *mut lua_State, ud: *mut ::std::os::raw::c_void, sz: *mut usize)
        -> *const ::std::os::raw::c_char,
>;
pub type lua_Writer = ::std::option::Option<
    unsafe extern "C" fn(
        L: *mut lua_State,
        p: *const ::std::os::raw::c_void,
        sz: usize,
        ud: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type lua_Alloc = ::std::option::Option<
    unsafe extern "C" fn(
        ud: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        osize: usize,
        nsize: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type lua_Number = f64;
pub type lua_Integer = isize;
extern "C" {
    pub fn lua_newstate(f: lua_Alloc, ud: *mut ::std::os::raw::c_void) -> *mut lua_State;
}
extern "C" {
    pub fn lua_close(L: *mut lua_State);
}
extern "C" {
    pub fn lua_newthread(L: *mut lua_State) -> *mut lua_State;
}
extern "C" {
    pub fn lua_atpanic(L: *mut lua_State, panicf: lua_CFunction) -> lua_CFunction;
}
extern "C" {
    pub fn lua_gettop(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_settop(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_pushvalue(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_remove(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_insert(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_replace(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_checkstack(L: *mut lua_State, sz: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_xmove(from: *mut lua_State, to: *mut lua_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_isnumber(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_isstring(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_iscfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_isuserdata(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_type(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_typename(
        L: *mut lua_State,
        tp: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_equal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_rawequal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_lessthan(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_tonumber(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_Number;
}
extern "C" {
    pub fn lua_tointeger(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_Integer;
}
extern "C" {
    pub fn lua_toboolean(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_tolstring(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_objlen(L: *mut lua_State, idx: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn lua_tocfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_CFunction;
}
extern "C" {
    pub fn lua_touserdata(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_tothread(L: *mut lua_State, idx: ::std::os::raw::c_int) -> *mut lua_State;
}
extern "C" {
    pub fn lua_topointer(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_pushnil(L: *mut lua_State);
}
extern "C" {
    pub fn lua_pushnumber(L: *mut lua_State, n: lua_Number);
}
extern "C" {
    pub fn lua_pushinteger(L: *mut lua_State, n: lua_Integer);
}
extern "C" {
    pub fn lua_pushlstring(L: *mut lua_State, s: *const ::std::os::raw::c_char, l: usize);
}
extern "C" {
    pub fn lua_pushstring(L: *mut lua_State, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn lua_pushvfstring(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        argp: *mut __va_list_tag,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_pushfstring(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_pushcclosure(L: *mut lua_State, fn_: lua_CFunction, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_pushboolean(L: *mut lua_State, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_pushlightuserdata(L: *mut lua_State, p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lua_pushthread(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gettable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_getfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn lua_rawget(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_rawgeti(L: *mut lua_State, idx: ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_createtable(
        L: *mut lua_State,
        narr: ::std::os::raw::c_int,
        nrec: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_newuserdata(L: *mut lua_State, sz: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_getmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getfenv(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_settable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_setfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn lua_rawset(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_rawseti(L: *mut lua_State, idx: ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_setmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_setfenv(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_call(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_pcall(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
        errfunc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_cpcall(
        L: *mut lua_State,
        func: lua_CFunction,
        ud: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_load(
        L: *mut lua_State,
        reader: lua_Reader,
        dt: *mut ::std::os::raw::c_void,
        chunkname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_dump(
        L: *mut lua_State,
        writer: lua_Writer,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_yield(L: *mut lua_State, nresults: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_resume(L: *mut lua_State, narg: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_status(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gc(
        L: *mut lua_State,
        what: ::std::os::raw::c_int,
        data: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_error(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_next(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_concat(L: *mut lua_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_getallocf(L: *mut lua_State, ud: *mut *mut ::std::os::raw::c_void) -> lua_Alloc;
}
extern "C" {
    pub fn lua_setallocf(L: *mut lua_State, f: lua_Alloc, ud: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lua_setlevel(from: *mut lua_State, to: *mut lua_State);
}
pub type lua_Hook =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>;
extern "C" {
    pub fn lua_getstack(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        ar: *mut lua_Debug,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getinfo(
        L: *mut lua_State,
        what: *const ::std::os::raw::c_char,
        ar: *mut lua_Debug,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getlocal(
        L: *mut lua_State,
        ar: *const lua_Debug,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_setlocal(
        L: *mut lua_State,
        ar: *const lua_Debug,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_getupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_setupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_sethook(
        L: *mut lua_State,
        func: lua_Hook,
        mask: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gethook(L: *mut lua_State) -> lua_Hook;
}
extern "C" {
    pub fn lua_gethookmask(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gethookcount(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_upvalueid(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_upvaluejoin(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_loadx(
        L: *mut lua_State,
        reader: lua_Reader,
        dt: *mut ::std::os::raw::c_void,
        chunkname: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_version(L: *mut lua_State) -> *const lua_Number;
}
extern "C" {
    pub fn lua_copy(
        L: *mut lua_State,
        fromidx: ::std::os::raw::c_int,
        toidx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_tonumberx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> lua_Number;
}
extern "C" {
    pub fn lua_tointegerx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> lua_Integer;
}
extern "C" {
    pub fn lua_isyieldable(L: *mut lua_State) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lua_Debug {
    pub event: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub namewhat: *const ::std::os::raw::c_char,
    pub what: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
    pub currentline: ::std::os::raw::c_int,
    pub nups: ::std::os::raw::c_int,
    pub linedefined: ::std::os::raw::c_int,
    pub lastlinedefined: ::std::os::raw::c_int,
    pub short_src: [::std::os::raw::c_char; 60usize],
    pub i_ci: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_lua_Debug() {
    assert_eq!(
        ::std::mem::size_of::<lua_Debug>(),
        120usize,
        concat!("Size of: ", stringify!(lua_Debug))
    );
    assert_eq!(
        ::std::mem::align_of::<lua_Debug>(),
        8usize,
        concat!("Alignment of ", stringify!(lua_Debug))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).namewhat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(namewhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).what as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(what)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).source as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).currentline as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(currentline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).nups as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(nups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).linedefined as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(linedefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).lastlinedefined as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(lastlinedefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).short_src as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(short_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).i_ci as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(i_ci)
        )
    );
}
extern "C" {
    pub fn lua_emacs_init(env: *mut emacs_env) -> *mut lua_State;
}
extern "C" {
    pub fn slow_arbitrary_funcall(
        env: *mut emacs_env,
        function_name: *const ::std::os::raw::c_char,
        nargs: isize,
        ...
    ) -> emacs_value;
}
extern "C" {
    pub fn nth_in_list(env: *mut emacs_env, arg: emacs_value, index: intmax_t) -> emacs_value;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime_private {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_private {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
